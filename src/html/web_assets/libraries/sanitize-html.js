const htmlparser=require('htmlparser2');const escapeStringRegexp=require('escape-string-regexp');const{isPlainObject}=require('is-plain-object');const deepmerge=require('deepmerge');const parseSrcset=require('parse-srcset');const{parse:postcssParse}=require('postcss');const mediaTags=['img','audio','video','picture','svg','object','map','iframe','embed'];const vulnerableTags=['script','style'];function each(obj,cb){if(obj){Object.keys(obj).forEach(function(key){cb(obj[key],key)})}}
function has(obj,key){return({}).hasOwnProperty.call(obj,key)}
function filter(a,cb){const n=[];each(a,function(v){if(cb(v)){n.push(v)}});return n}
function isEmptyObject(obj){for(const key in obj){if(has(obj,key)){return!1}}
return!0}
function stringifySrcset(parsedSrcset){return parsedSrcset.map(function(part){if(!part.url){throw new Error('URL missing')}
return(part.url+(part.w?` ${part.w}w`:'')+(part.h?` ${part.h}h`:'')+(part.d?` ${part.d}x`:''))}).join(', ')}
module.exports=sanitizeHtml;const VALID_HTML_ATTRIBUTE_NAME=/^[^\0\t\n\f\r /<=>]+$/;function sanitizeHtml(html,options,_recursing){if(html==null){return''}
if(typeof html==='number'){html=html.toString()}
let result='';let tempResult='';function Frame(tag,attribs){const that=this;this.tag=tag;this.attribs=attribs||{};this.tagPosition=result.length;this.text='';this.mediaChildren=[];this.updateParentNodeText=function(){if(stack.length){const parentFrame=stack[stack.length-1];parentFrame.text+=that.text}};this.updateParentNodeMediaChildren=function(){if(stack.length&&mediaTags.includes(this.tag)){const parentFrame=stack[stack.length-1];parentFrame.mediaChildren.push(this.tag)}}}
options=Object.assign({},sanitizeHtml.defaults,options);options.parser=Object.assign({},htmlParserDefaults,options.parser);const tagAllowed=function(name){return options.allowedTags===!1||(options.allowedTags||[]).indexOf(name)>-1};vulnerableTags.forEach(function(tag){if(tagAllowed(tag)&&!options.allowVulnerableTags){console.warn(`\n\n⚠️ Your \`allowedTags\` option includes, \`${tag}\`, which is inherently\nvulnerable to XSS attacks. Please remove it from \`allowedTags\`.\nOr, to disable this warning, add the \`allowVulnerableTags\` option\nand ensure you are accounting for this risk.\n\n`)}});const nonTextTagsArray=options.nonTextTags||['script','style','textarea','option'];let allowedAttributesMap;let allowedAttributesGlobMap;if(options.allowedAttributes){allowedAttributesMap={};allowedAttributesGlobMap={};each(options.allowedAttributes,function(attributes,tag){allowedAttributesMap[tag]=[];const globRegex=[];attributes.forEach(function(obj){if(typeof obj==='string'&&obj.indexOf('*')>=0){globRegex.push(escapeStringRegexp(obj).replace(/\\\*/g,'.*'))}else{allowedAttributesMap[tag].push(obj)}});if(globRegex.length){allowedAttributesGlobMap[tag]=new RegExp('^('+globRegex.join('|')+')$')}})}
const allowedClassesMap={};const allowedClassesGlobMap={};const allowedClassesRegexMap={};each(options.allowedClasses,function(classes,tag){if(allowedAttributesMap){if(!has(allowedAttributesMap,tag)){allowedAttributesMap[tag]=[]}
allowedAttributesMap[tag].push('class')}
allowedClassesMap[tag]=classes;if(Array.isArray(classes)){const globRegex=[];allowedClassesMap[tag]=[];allowedClassesRegexMap[tag]=[];classes.forEach(function(obj){if(typeof obj==='string'&&obj.indexOf('*')>=0){globRegex.push(escapeStringRegexp(obj).replace(/\\\*/g,'.*'))}else if(obj instanceof RegExp){allowedClassesRegexMap[tag].push(obj)}else{allowedClassesMap[tag].push(obj)}});if(globRegex.length){allowedClassesGlobMap[tag]=new RegExp('^('+globRegex.join('|')+')$')}}});const transformTagsMap={};let transformTagsAll;each(options.transformTags,function(transform,tag){let transFun;if(typeof transform==='function'){transFun=transform}else if(typeof transform==='string'){transFun=sanitizeHtml.simpleTransform(transform)}
if(tag==='*'){transformTagsAll=transFun}else{transformTagsMap[tag]=transFun}});let depth;let stack;let skipMap;let transformMap;let skipText;let skipTextDepth;let addedText=!1;initializeState();const parser=new htmlparser.Parser({onopentag:function(name,attribs){if(options.enforceHtmlBoundary&&name==='html'){initializeState()}
if(skipText){skipTextDepth++;return}
const frame=new Frame(name,attribs);stack.push(frame);let skip=!1;const hasText=!!frame.text;let transformedTag;if(has(transformTagsMap,name)){transformedTag=transformTagsMap[name](name,attribs);frame.attribs=attribs=transformedTag.attribs;if(transformedTag.text!==undefined){frame.innerText=transformedTag.text}
if(name!==transformedTag.tagName){frame.name=name=transformedTag.tagName;transformMap[depth]=transformedTag.tagName}}
if(transformTagsAll){transformedTag=transformTagsAll(name,attribs);frame.attribs=attribs=transformedTag.attribs;if(name!==transformedTag.tagName){frame.name=name=transformedTag.tagName;transformMap[depth]=transformedTag.tagName}}
if(!tagAllowed(name)||(options.disallowedTagsMode==='recursiveEscape'&&!isEmptyObject(skipMap))||(options.nestingLimit!=null&&depth>=options.nestingLimit)){skip=!0;skipMap[depth]=!0;if(options.disallowedTagsMode==='discard'||options.disallowedTagsMode==='completelyDiscard'){if(nonTextTagsArray.indexOf(name)!==-1){skipText=!0;skipTextDepth=1}}
skipMap[depth]=!0}
depth++;if(skip){if(options.disallowedTagsMode==='discard'||options.disallowedTagsMode==='completelyDiscard'){return}
tempResult=result;result=''}
result+='<'+name;if(name==='script'){if(options.allowedScriptHostnames||options.allowedScriptDomains){frame.innerText=''}}
if(!allowedAttributesMap||has(allowedAttributesMap,name)||allowedAttributesMap['*']){each(attribs,function(value,a){if(!VALID_HTML_ATTRIBUTE_NAME.test(a)){delete frame.attribs[a];return}
if(value===''&&(!options.allowedEmptyAttributes.includes(a))&&(options.nonBooleanAttributes.includes(a)||options.nonBooleanAttributes.includes('*'))){delete frame.attribs[a];return}
let passedAllowedAttributesMapCheck=!1;if(!allowedAttributesMap||(has(allowedAttributesMap,name)&&allowedAttributesMap[name].indexOf(a)!==-1)||(allowedAttributesMap['*']&&allowedAttributesMap['*'].indexOf(a)!==-1)||(has(allowedAttributesGlobMap,name)&&allowedAttributesGlobMap[name].test(a))||(allowedAttributesGlobMap['*']&&allowedAttributesGlobMap['*'].test(a))){passedAllowedAttributesMapCheck=!0}else if(allowedAttributesMap&&allowedAttributesMap[name]){for(const o of allowedAttributesMap[name]){if(isPlainObject(o)&&o.name&&(o.name===a)){passedAllowedAttributesMapCheck=!0;let newValue='';if(o.multiple===!0){const splitStrArray=value.split(' ');for(const s of splitStrArray){if(o.values.indexOf(s)!==-1){if(newValue===''){newValue=s}else{newValue+=' '+s}}}}else if(o.values.indexOf(value)>=0){newValue=value}
value=newValue}}}
if(passedAllowedAttributesMapCheck){if(options.allowedSchemesAppliedToAttributes.indexOf(a)!==-1){if(naughtyHref(name,value)){delete frame.attribs[a];return}}
if(name==='script'&&a==='src'){let allowed=!0;try{const parsed=parseUrl(value);if(options.allowedScriptHostnames||options.allowedScriptDomains){const allowedHostname=(options.allowedScriptHostnames||[]).find(function(hostname){return hostname===parsed.url.hostname});const allowedDomain=(options.allowedScriptDomains||[]).find(function(domain){return parsed.url.hostname===domain||parsed.url.hostname.endsWith(`.${domain}`)});allowed=allowedHostname||allowedDomain}}catch(e){allowed=!1}
if(!allowed){delete frame.attribs[a];return}}
if(name==='iframe'&&a==='src'){let allowed=!0;try{const parsed=parseUrl(value);if(parsed.isRelativeUrl){allowed=has(options,'allowIframeRelativeUrls')?options.allowIframeRelativeUrls:(!options.allowedIframeHostnames&&!options.allowedIframeDomains)}else if(options.allowedIframeHostnames||options.allowedIframeDomains){const allowedHostname=(options.allowedIframeHostnames||[]).find(function(hostname){return hostname===parsed.url.hostname});const allowedDomain=(options.allowedIframeDomains||[]).find(function(domain){return parsed.url.hostname===domain||parsed.url.hostname.endsWith(`.${domain}`)});allowed=allowedHostname||allowedDomain}}catch(e){allowed=!1}
if(!allowed){delete frame.attribs[a];return}}
if(a==='srcset'){try{let parsed=parseSrcset(value);parsed.forEach(function(value){if(naughtyHref('srcset',value.url)){value.evil=!0}});parsed=filter(parsed,function(v){return!v.evil});if(!parsed.length){delete frame.attribs[a];return}else{value=stringifySrcset(filter(parsed,function(v){return!v.evil}));frame.attribs[a]=value}}catch(e){delete frame.attribs[a];return}}
if(a==='class'){const allowedSpecificClasses=allowedClassesMap[name];const allowedWildcardClasses=allowedClassesMap['*'];const allowedSpecificClassesGlob=allowedClassesGlobMap[name];const allowedSpecificClassesRegex=allowedClassesRegexMap[name];const allowedWildcardClassesRegex=allowedClassesRegexMap['*'];const allowedWildcardClassesGlob=allowedClassesGlobMap['*'];const allowedClassesGlobs=[allowedSpecificClassesGlob,allowedWildcardClassesGlob].concat(allowedSpecificClassesRegex,allowedWildcardClassesRegex).filter(function(t){return t});if(allowedSpecificClasses&&allowedWildcardClasses){value=filterClasses(value,deepmerge(allowedSpecificClasses,allowedWildcardClasses),allowedClassesGlobs)}else{value=filterClasses(value,allowedSpecificClasses||allowedWildcardClasses,allowedClassesGlobs)}
if(!value.length){delete frame.attribs[a];return}}
if(a==='style'){if(options.parseStyleAttributes){try{const abstractSyntaxTree=postcssParse(name+' {'+value+'}',{map:!1});const filteredAST=filterCss(abstractSyntaxTree,options.allowedStyles);value=stringifyStyleAttributes(filteredAST);if(value.length===0){delete frame.attribs[a];return}}catch(e){if(typeof window!=='undefined'){console.warn('Failed to parse "'+name+' {'+value+'}'+'", If you\'re running this in a browser, we recommend to disable style parsing: options.parseStyleAttributes: false, since this only works in a node environment due to a postcss dependency, More info: https://github.com/apostrophecms/sanitize-html/issues/547')}
delete frame.attribs[a];return}}else if(options.allowedStyles){throw new Error('allowedStyles option cannot be used together with parseStyleAttributes: false.')}}
result+=' '+a;if(value&&value.length){result+='="'+escapeHtml(value,!0)+'"'}else if(options.allowedEmptyAttributes.includes(a)){result+='=""'}}else{delete frame.attribs[a]}})}
if(options.selfClosing.indexOf(name)!==-1){result+=' />'}else{result+='>';if(frame.innerText&&!hasText&&!options.textFilter){result+=escapeHtml(frame.innerText);addedText=!0}}
if(skip){result=tempResult+escapeHtml(result);tempResult=''}},ontext:function(text){if(skipText){return}
const lastFrame=stack[stack.length-1];let tag;if(lastFrame){tag=lastFrame.tag;text=lastFrame.innerText!==undefined?lastFrame.innerText:text}
if(options.disallowedTagsMode==='completelyDiscard'&&!tagAllowed(tag)){text=''}else if((options.disallowedTagsMode==='discard'||options.disallowedTagsMode==='completelyDiscard')&&((tag==='script')||(tag==='style'))){result+=text}else{const escaped=escapeHtml(text,!1);if(options.textFilter&&!addedText){result+=options.textFilter(escaped,tag)}else if(!addedText){result+=escaped}}
if(stack.length){const frame=stack[stack.length-1];frame.text+=text}},onclosetag:function(name,isImplied){if(skipText){skipTextDepth--;if(!skipTextDepth){skipText=!1}else{return}}
const frame=stack.pop();if(!frame){return}
if(frame.tag!==name){stack.push(frame);return}
skipText=options.enforceHtmlBoundary?name==='html':!1;depth--;const skip=skipMap[depth];if(skip){delete skipMap[depth];if(options.disallowedTagsMode==='discard'||options.disallowedTagsMode==='completelyDiscard'){frame.updateParentNodeText();return}
tempResult=result;result=''}
if(transformMap[depth]){name=transformMap[depth];delete transformMap[depth]}
if(options.exclusiveFilter&&options.exclusiveFilter(frame)){result=result.substr(0,frame.tagPosition);return}
frame.updateParentNodeMediaChildren();frame.updateParentNodeText();if(options.selfClosing.indexOf(name)!==-1||(isImplied&&!tagAllowed(name)&&['escape','recursiveEscape'].indexOf(options.disallowedTagsMode)>=0)){if(skip){result=tempResult;tempResult=''}
return}
result+='</'+name+'>';if(skip){result=tempResult+escapeHtml(result);tempResult=''}
addedText=!1}},options.parser);parser.write(html);parser.end();return result;function initializeState(){result='';depth=0;stack=[];skipMap={};transformMap={};skipText=!1;skipTextDepth=0}
function escapeHtml(s,quote){if(typeof(s)!=='string'){s=s+''}
if(options.parser.decodeEntities){s=s.replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;');if(quote){s=s.replace(/"/g,'&quot;')}}
s=s.replace(/&(?![a-zA-Z0-9#]{1,20};)/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;');if(quote){s=s.replace(/"/g,'&quot;')}
return s}
function naughtyHref(name,href){href=href.replace(/[\x00-\x20]+/g,'');while(!0){const firstIndex=href.indexOf('<!--');if(firstIndex===-1){break}
const lastIndex=href.indexOf('-->',firstIndex+4);if(lastIndex===-1){break}
href=href.substring(0,firstIndex)+href.substring(lastIndex+3)}
const matches=href.match(/^([a-zA-Z][a-zA-Z0-9.\-+]*):/);if(!matches){if(href.match(/^[/\\]{2}/)){return!options.allowProtocolRelative}
return!1}
const scheme=matches[1].toLowerCase();if(has(options.allowedSchemesByTag,name)){return options.allowedSchemesByTag[name].indexOf(scheme)===-1}
return!options.allowedSchemes||options.allowedSchemes.indexOf(scheme)===-1}
function parseUrl(value){value=value.replace(/^(\w+:)?\s*[\\/]\s*[\\/]/,'$1//');if(value.startsWith('relative:')){throw new Error('relative: exploit attempt')}
let base='relative://relative-site';for(let i=0;(i<100);i++){base+=`/${i}`}
const parsed=new URL(value,base);const isRelativeUrl=parsed&&parsed.hostname==='relative-site'&&parsed.protocol==='relative:';return{isRelativeUrl,url:parsed}}
function filterCss(abstractSyntaxTree,allowedStyles){if(!allowedStyles){return abstractSyntaxTree}
const astRules=abstractSyntaxTree.nodes[0];let selectedRule;if(allowedStyles[astRules.selector]&&allowedStyles['*']){selectedRule=deepmerge(allowedStyles[astRules.selector],allowedStyles['*'])}else{selectedRule=allowedStyles[astRules.selector]||allowedStyles['*']}
if(selectedRule){abstractSyntaxTree.nodes[0].nodes=astRules.nodes.reduce(filterDeclarations(selectedRule),[])}
return abstractSyntaxTree}
function stringifyStyleAttributes(filteredAST){return filteredAST.nodes[0].nodes.reduce(function(extractedAttributes,attrObject){extractedAttributes.push(`${attrObject.prop}:${attrObject.value}${attrObject.important ? ' !important' : ''}`);return extractedAttributes},[]).join(';')}
function filterDeclarations(selectedRule){return function(allowedDeclarationsList,attributeObject){if(has(selectedRule,attributeObject.prop)){const matchesRegex=selectedRule[attributeObject.prop].some(function(regularExpression){return regularExpression.test(attributeObject.value)});if(matchesRegex){allowedDeclarationsList.push(attributeObject)}}
return allowedDeclarationsList}}
function filterClasses(classes,allowed,allowedGlobs){if(!allowed){return classes}
classes=classes.split(/\s+/);return classes.filter(function(clss){return allowed.indexOf(clss)!==-1||allowedGlobs.some(function(glob){return glob.test(clss)})}).join(' ')}}
const htmlParserDefaults={decodeEntities:!0};sanitizeHtml.defaults={allowedTags:['address','article','aside','footer','header','h1','h2','h3','h4','h5','h6','hgroup','main','nav','section','blockquote','dd','div','dl','dt','figcaption','figure','hr','li','main','ol','p','pre','ul','a','abbr','b','bdi','bdo','br','cite','code','data','dfn','em','i','kbd','mark','q','rb','rp','rt','rtc','ruby','s','samp','small','span','strong','sub','sup','time','u','var','wbr','caption','col','colgroup','table','tbody','td','tfoot','th','thead','tr'],nonBooleanAttributes:['abbr','accept','accept-charset','accesskey','action','allow','alt','as','autocapitalize','autocomplete','blocking','charset','cite','class','color','cols','colspan','content','contenteditable','coords','crossorigin','data','datetime','decoding','dir','dirname','download','draggable','enctype','enterkeyhint','fetchpriority','for','form','formaction','formenctype','formmethod','formtarget','headers','height','hidden','high','href','hreflang','http-equiv','id','imagesizes','imagesrcset','inputmode','integrity','is','itemid','itemprop','itemref','itemtype','kind','label','lang','list','loading','low','max','maxlength','media','method','min','minlength','name','nonce','optimum','pattern','ping','placeholder','popover','popovertarget','popovertargetaction','poster','preload','referrerpolicy','rel','rows','rowspan','sandbox','scope','shape','size','sizes','slot','span','spellcheck','src','srcdoc','srclang','srcset','start','step','style','tabindex','target','title','translate','type','usemap','value','width','wrap','onauxclick','onafterprint','onbeforematch','onbeforeprint','onbeforeunload','onbeforetoggle','onblur','oncancel','oncanplay','oncanplaythrough','onchange','onclick','onclose','oncontextlost','oncontextmenu','oncontextrestored','oncopy','oncuechange','oncut','ondblclick','ondrag','ondragend','ondragenter','ondragleave','ondragover','ondragstart','ondrop','ondurationchange','onemptied','onended','onerror','onfocus','onformdata','onhashchange','oninput','oninvalid','onkeydown','onkeypress','onkeyup','onlanguagechange','onload','onloadeddata','onloadedmetadata','onloadstart','onmessage','onmessageerror','onmousedown','onmouseenter','onmouseleave','onmousemove','onmouseout','onmouseover','onmouseup','onoffline','ononline','onpagehide','onpageshow','onpaste','onpause','onplay','onplaying','onpopstate','onprogress','onratechange','onreset','onresize','onrejectionhandled','onscroll','onscrollend','onsecuritypolicyviolation','onseeked','onseeking','onselect','onslotchange','onstalled','onstorage','onsubmit','onsuspend','ontimeupdate','ontoggle','onunhandledrejection','onunload','onvolumechange','onwaiting','onwheel'],disallowedTagsMode:'discard',allowedAttributes:{a:['href','name','target'],img:['src','srcset','alt','title','width','height','loading']},allowedEmptyAttributes:['alt'],selfClosing:['img','br','hr','area','base','basefont','input','link','meta'],allowedSchemes:['http','https','ftp','mailto','tel'],allowedSchemesByTag:{},allowedSchemesAppliedToAttributes:['href','src','cite'],allowProtocolRelative:!0,enforceHtmlBoundary:!1,parseStyleAttributes:!0};sanitizeHtml.simpleTransform=function(newTagName,newAttribs,merge){merge=(merge===undefined)?!0:merge;newAttribs=newAttribs||{};return function(tagName,attribs){let attrib;if(merge){for(attrib in newAttribs){attribs[attrib]=newAttribs[attrib]}}else{attribs=newAttribs}
return{tagName:newTagName,attribs:attribs}}}